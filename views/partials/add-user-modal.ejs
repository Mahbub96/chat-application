<div class="modal-wrapper" id="add-user-modal">
  <div class="modal">
    <a href="#" onclick="closeModal()" class="modal-close">+</a>
    <div class="modal-title">
      <h2>Create New User</h2>
    </div>
    <div class="modal-body">
      <form
        method="post"
        action="/users"
        enctype="multipart/form-data"
        id="add-user-form"
      >
        <input type="text" placeholder="enter name" name="name" />
        <p class="error name-error"></p>

        <input type="text" placeholder="enter email" name="email" />
        <p class="error email-error"></p>

        <input type="text" placeholder="enter mobile" name="mobile" />
        <p class="error mobile-error"></p>

        <input type="password" placeholder="enter password" name="password" />
        <p class="error password-error"></p>

        <input type="file" name="avatar" />
        <p class="error avatar-error"></p>

        <p class="error common-error"></p>

        <input type="submit" value="Submit" />
      </form>
    </div>
  </div>
</div>
<script>
  const modal = document.querySelector("#add-user-modal");
  const form = document.querySelector("#add-user-form");
  const errorPlaceholders = document.querySelectorAll("p.error");

  // success toast
  const successToast = Toastify({
    text: "User was added successfully! Reloading the list...",
    duration: 1000,
  });

  // Modal functions
  const closeModal = () => modal.style.display = "none";
  const openModal = () => modal.style.display = "block";

  // Clear all errors
  const clearErrors = () => {
    errorPlaceholders.forEach(placeholder => placeholder.style.display = "none");
    document.querySelectorAll("input.error").forEach(input => input.classList.remove("error"));
  };

  // Display field errors
  const displayErrors = (errors) => {
    Object.entries(errors).forEach(([fieldName, error]) => {
      const input = form[fieldName];
      const errorPlaceholder = document.querySelector(`.${fieldName}-error`);
      
      if (input && errorPlaceholder) {
        input.classList.add("error");
        errorPlaceholder.textContent = error.msg;
        errorPlaceholder.style.display = "block";
      }
    });
  };

  // Handle form submission
  form.onsubmit = async (event) => {
    event.preventDefault();
    clearErrors();

    try {
      const response = await fetch("/users", {
        method: "POST",
        body: new FormData(form)
      });

      const result = await response.json();

      if (result.errors) {
        displayErrors(result.errors);
      } else {
        successToast.showToast();
        closeModal();
        document.querySelector("p.error").style.display = "none";
        setTimeout(() => location.reload(), 1000);
      }
    } catch (err) {
      console.error('Form submission error:', err);
    }
  };
</script>
